// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: srcjflexcup/specific.flex

package esercitazione4;
import java_cup.runtime.Symbol;
import java.io.EOFException;
/* User code */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\11\23\1\24\1\25\1\26\1\27\1\30\1\3"+
    "\1\31\32\32\1\3\1\33\1\3\1\34\1\32\1\3"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\32\1\46\1\32\1\47\1\50\1\51\1\32"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\3\32\1\3"+
    "\1\60\2\3\41\0\2\3\4\32\4\3\1\32\2\3"+
    "\1\0\7\3\1\32\4\3\1\32\5\3\27\32\1\3"+
    "\37\32\1\3\u01ca\32\4\3\14\32\16\3\5\32\7\3"+
    "\1\32\1\3\1\32\21\3\160\0\5\32\1\3\2\32"+
    "\2\3\4\32\1\3\1\32\6\3\1\32\1\3\3\32"+
    "\1\3\1\32\1\3\24\32\1\3\123\32\1\3\213\32"+
    "\1\3\5\0\2\3\246\32\1\3\46\32\2\3\1\32"+
    "\6\3\51\32\6\3\1\32\1\3\55\0\1\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\3\1\0\10\3\33\32"+
    "\4\3\4\32\15\3\6\0\5\3\1\32\4\3\13\0"+
    "\1\3\1\0\3\3\53\32\37\0\4\3\2\32\1\0"+
    "\143\32\1\3\1\32\10\0\1\3\6\0\2\32\2\0"+
    "\1\3\4\0\2\32\12\0\3\32\2\3\1\32\17\3"+
    "\1\0\1\32\1\0\36\32\33\0\2\3\131\32\13\0"+
    "\1\32\16\3\12\0\41\32\11\0\2\32\4\3\1\32"+
    "\2\3\1\0\30\32\4\0\1\32\11\0\1\32\3\0"+
    "\1\32\5\0\22\3\31\32\3\0\4\3\13\32\65\3"+
    "\25\32\1\3\22\32\13\3\61\0\66\32\3\0\1\32"+
    "\22\0\1\32\7\0\12\32\2\0\2\3\12\0\1\3"+
    "\20\32\3\0\1\3\10\32\2\3\2\32\2\3\26\32"+
    "\1\3\7\32\1\3\1\32\3\3\4\32\2\3\1\0"+
    "\1\32\7\0\2\3\2\0\2\3\3\0\1\32\10\3"+
    "\1\0\4\3\2\32\1\3\3\32\2\0\2\3\12\0"+
    "\4\32\7\3\2\32\1\3\1\0\2\3\3\0\1\3"+
    "\6\32\4\3\2\32\2\3\26\32\1\3\7\32\1\3"+
    "\2\32\1\3\2\32\1\3\2\32\2\3\1\0\1\3"+
    "\5\0\4\3\2\0\2\3\3\0\3\3\1\0\7\3"+
    "\4\32\1\3\1\32\7\3\14\0\3\32\1\0\13\3"+
    "\3\0\1\3\11\32\1\3\3\32\1\3\26\32\1\3"+
    "\7\32\1\3\2\32\1\3\5\32\2\3\1\0\1\32"+
    "\10\0\1\3\3\0\1\3\3\0\2\3\1\32\17\3"+
    "\2\32\2\0\2\3\12\0\1\3\1\32\7\3\1\32"+
    "\6\0\1\3\3\0\1\3\10\32\2\3\2\32\2\3"+
    "\26\32\1\3\7\32\1\3\2\32\1\3\5\32\2\3"+
    "\1\0\1\32\7\0\2\3\2\0\2\3\3\0\7\3"+
    "\3\0\4\3\2\32\1\3\3\32\2\0\2\3\12\0"+
    "\1\3\1\32\20\3\1\0\1\32\1\3\6\32\3\3"+
    "\3\32\1\3\4\32\3\3\2\32\1\3\1\32\1\3"+
    "\2\32\3\3\2\32\3\3\3\32\3\3\14\32\4\3"+
    "\5\0\3\3\3\0\1\3\4\0\2\3\1\32\6\3"+
    "\1\0\16\3\12\0\11\3\1\32\6\3\5\0\10\32"+
    "\1\3\3\32\1\3\27\32\1\3\20\32\3\3\1\32"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\1\3"+
    "\3\32\5\3\2\32\2\0\2\3\12\0\20\3\1\32"+
    "\3\0\1\3\10\32\1\3\3\32\1\3\27\32\1\3"+
    "\12\32\1\3\5\32\2\3\1\0\1\32\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\7\3\1\32\1\3"+
    "\2\32\2\0\2\3\12\0\1\3\2\32\15\3\4\0"+
    "\11\32\1\3\3\32\1\3\51\32\2\0\1\32\7\0"+
    "\1\3\3\0\1\3\4\0\1\32\5\3\3\32\1\0"+
    "\7\3\3\32\2\0\2\3\12\0\12\3\6\32\1\3"+
    "\3\0\1\3\22\32\3\3\30\32\1\3\11\32\1\3"+
    "\1\32\2\3\7\32\3\3\1\0\4\3\6\0\1\3"+
    "\1\0\1\3\10\0\6\3\12\0\2\3\2\0\15\3"+
    "\60\32\1\0\2\32\7\0\4\3\10\32\10\0\1\3"+
    "\12\0\47\3\2\32\1\3\1\32\1\3\5\32\1\3"+
    "\30\32\1\3\1\32\1\3\12\32\1\0\2\32\11\0"+
    "\1\32\2\3\5\32\1\3\1\32\1\3\6\0\2\3"+
    "\12\0\2\3\4\32\40\3\1\32\27\3\2\0\6\3"+
    "\12\0\13\3\1\0\1\3\1\0\1\3\1\0\4\3"+
    "\2\0\10\32\1\3\44\32\4\3\24\0\1\3\2\0"+
    "\5\32\13\0\1\3\44\0\11\3\1\0\71\3\53\32"+
    "\24\0\1\32\12\0\6\3\6\32\4\0\4\32\3\0"+
    "\1\32\3\0\2\32\7\0\3\32\4\0\15\32\14\0"+
    "\1\32\17\0\2\3\46\32\1\3\1\32\5\3\1\32"+
    "\2\3\53\32\1\3\115\32\1\3\4\32\2\3\7\32"+
    "\1\3\1\32\1\3\4\32\2\3\51\32\1\3\4\32"+
    "\2\3\41\32\1\3\4\32\2\3\7\32\1\3\1\32"+
    "\1\3\4\32\2\3\17\32\1\3\71\32\1\3\4\32"+
    "\2\3\103\32\2\3\3\0\40\3\20\32\20\3\126\32"+
    "\2\3\6\32\3\3\u016c\32\2\3\21\32\1\3\32\32"+
    "\5\3\113\32\3\3\13\32\7\3\15\32\1\3\4\32"+
    "\3\0\13\3\22\32\3\0\13\3\22\32\2\0\14\3"+
    "\15\32\1\3\3\32\1\3\2\0\14\3\64\32\40\0"+
    "\3\3\1\32\3\3\2\32\1\0\2\3\12\0\41\3"+
    "\4\0\1\3\12\0\6\3\131\32\7\3\5\32\2\0"+
    "\42\32\1\0\1\32\5\3\106\32\12\3\37\32\1\3"+
    "\14\0\4\3\14\0\12\3\12\0\36\32\2\3\5\32"+
    "\13\3\54\32\4\3\32\32\6\3\12\0\46\3\27\32"+
    "\5\0\4\3\65\32\12\0\1\3\35\0\2\3\13\0"+
    "\6\3\12\0\15\3\1\32\10\3\16\0\1\3\2\0"+
    "\77\3\5\0\57\32\21\0\7\32\4\3\12\0\21\3"+
    "\11\0\14\3\3\0\36\32\15\0\2\32\12\0\54\32"+
    "\16\0\14\3\44\32\24\0\10\3\12\0\3\3\3\32"+
    "\12\0\44\32\2\3\11\32\7\3\53\32\2\3\3\32"+
    "\20\3\3\0\1\3\25\0\4\32\1\0\6\32\1\0"+
    "\2\32\3\0\1\32\5\3\300\32\72\0\1\3\5\0"+
    "\26\32\2\3\6\32\2\3\46\32\2\3\6\32\2\3"+
    "\10\32\1\3\1\32\1\3\1\32\1\3\1\32\1\3"+
    "\37\32\2\3\65\32\1\3\7\32\1\3\1\32\3\3"+
    "\3\32\1\3\7\32\3\3\4\32\2\3\6\32\4\3"+
    "\15\32\5\3\3\32\1\3\7\32\16\3\5\0\32\3"+
    "\5\0\20\3\2\32\23\3\1\32\13\3\5\0\1\3"+
    "\12\0\1\3\1\32\15\3\1\32\20\3\15\32\3\3"+
    "\40\32\20\3\15\0\4\3\1\0\3\3\14\0\21\3"+
    "\1\32\4\3\1\32\2\3\12\32\1\3\1\32\3\3"+
    "\5\32\6\3\1\32\1\3\1\32\1\3\1\32\1\3"+
    "\4\32\1\3\13\32\2\3\4\32\5\3\5\32\4\3"+
    "\1\32\21\3\51\32\u0177\3\57\32\1\3\57\32\1\3"+
    "\205\32\6\3\4\32\3\0\2\32\14\3\46\32\1\3"+
    "\1\32\5\3\1\32\2\3\70\32\7\3\1\32\17\3"+
    "\1\0\27\32\11\3\7\32\1\3\7\32\1\3\7\32"+
    "\1\3\7\32\1\3\7\32\1\3\7\32\1\3\7\32"+
    "\1\3\7\32\1\3\40\0\57\3\1\32\325\3\3\32"+
    "\31\3\11\32\6\0\1\3\5\32\2\3\5\32\4\3"+
    "\126\32\2\3\2\0\2\3\3\32\1\3\132\32\1\3"+
    "\4\32\5\3\53\32\1\3\136\32\21\3\40\32\60\3"+
    "\320\32\100\3\375\32\3\3\215\32\103\3\56\32\2\3"+
    "\15\32\3\3\20\32\12\0\2\32\24\3\57\32\1\0"+
    "\4\3\12\0\1\3\37\32\2\0\120\32\2\0\45\3"+
    "\11\32\2\3\147\32\2\3\65\32\2\3\11\32\52\3"+
    "\15\32\1\0\3\32\1\0\4\32\1\0\27\32\5\0"+
    "\4\3\1\0\13\3\1\32\7\3\64\32\14\3\2\0"+
    "\62\32\22\0\12\3\12\0\6\3\22\0\6\32\3\3"+
    "\1\32\1\3\2\32\13\0\34\32\10\0\2\3\27\32"+
    "\15\0\14\3\35\32\3\3\4\0\57\32\16\0\16\3"+
    "\1\32\12\0\6\3\5\32\1\0\12\32\12\0\5\32"+
    "\1\3\51\32\16\0\11\3\3\32\1\0\10\32\2\0"+
    "\2\3\12\0\6\3\27\32\3\3\1\32\3\0\62\32"+
    "\1\0\1\32\3\0\2\32\2\0\5\32\2\0\1\32"+
    "\1\0\1\32\30\3\3\32\2\3\13\32\5\0\2\3"+
    "\3\32\2\0\12\3\6\32\2\3\6\32\2\3\6\32"+
    "\11\3\7\32\1\3\7\32\1\3\53\32\1\3\16\32"+
    "\6\3\163\32\10\0\1\3\2\0\2\3\12\0\6\3"+
    "\244\32\14\3\27\32\4\3\61\32\4\3\156\32\2\3"+
    "\152\32\46\3\7\32\14\3\5\32\5\3\1\32\1\0"+
    "\12\32\1\3\15\32\1\3\5\32\1\3\1\32\1\3"+
    "\2\32\1\3\2\32\1\3\154\32\41\3\153\32\22\3"+
    "\100\32\2\3\66\32\50\3\15\32\3\3\20\0\20\3"+
    "\20\0\3\3\2\32\30\3\3\32\31\3\1\32\6\3"+
    "\5\32\1\3\207\32\2\3\1\0\4\3\1\32\13\3"+
    "\12\0\7\3\32\32\4\3\1\32\1\3\32\32\13\3"+
    "\131\32\3\3\6\32\2\3\6\32\2\3\6\32\2\3"+
    "\3\32\3\3\2\32\3\3\2\32\22\3\3\0\4\3"+
    "\14\32\1\3\32\32\1\3\23\32\1\3\2\32\1\3"+
    "\17\32\2\3\16\32\42\3\173\32\105\3\65\32\210\3"+
    "\1\0\202\3\35\32\3\3\61\32\17\3\1\0\37\3"+
    "\40\32\15\3\36\32\5\3\46\32\5\0\5\3\36\32"+
    "\2\3\44\32\4\3\10\32\1\3\5\32\52\3\236\32"+
    "\2\3\12\0\6\3\44\32\4\3\44\32\4\3\50\32"+
    "\10\3\64\32\234\3\67\32\11\3\26\32\12\3\10\32"+
    "\230\3\6\32\2\3\1\32\1\3\54\32\1\3\2\32"+
    "\3\3\1\32\2\3\27\32\12\3\27\32\11\3\37\32"+
    "\101\3\23\32\1\3\2\32\12\3\26\32\12\3\32\32"+
    "\106\3\70\32\6\3\2\32\100\3\1\32\3\0\1\3"+
    "\2\0\5\3\4\0\4\32\1\3\3\32\1\3\35\32"+
    "\2\3\3\0\4\3\1\0\40\3\35\32\3\3\35\32"+
    "\43\3\10\32\1\3\34\32\2\0\31\3\66\32\12\3"+
    "\26\32\12\3\23\32\15\3\22\32\156\3\111\32\67\3"+
    "\63\32\15\3\63\32\15\3\44\32\4\0\10\3\12\0"+
    "\u0146\3\52\32\1\3\2\0\3\3\2\32\116\3\35\32"+
    "\12\3\1\32\10\3\26\32\13\0\137\3\25\32\33\3"+
    "\27\32\11\3\3\0\65\32\17\0\37\3\12\0\17\3"+
    "\4\0\55\32\13\0\2\3\1\0\17\3\1\0\2\3"+
    "\31\32\7\3\12\0\6\3\3\0\44\32\16\0\1\3"+
    "\12\0\4\3\1\32\2\0\1\32\10\3\43\32\1\0"+
    "\2\3\1\32\11\3\3\0\60\32\16\0\4\32\4\3"+
    "\4\0\1\3\14\0\1\32\1\3\1\32\43\3\22\32"+
    "\1\3\31\32\14\0\6\3\1\0\101\3\7\32\1\3"+
    "\1\32\1\3\4\32\1\3\17\32\1\3\12\32\7\3"+
    "\57\32\14\0\5\3\12\0\6\3\4\0\1\3\10\32"+
    "\2\3\2\32\2\3\26\32\1\3\7\32\1\3\2\32"+
    "\1\3\5\32\1\3\2\0\1\32\7\0\2\3\2\0"+
    "\2\3\3\0\2\3\1\32\6\3\1\0\5\3\5\32"+
    "\2\0\2\3\7\0\3\3\5\0\213\3\65\32\22\0"+
    "\4\32\5\3\12\0\4\3\1\0\3\32\36\3\60\32"+
    "\24\0\2\32\1\3\1\32\10\3\12\0\246\3\57\32"+
    "\7\0\2\3\11\0\27\3\4\32\2\0\42\3\60\32"+
    "\21\0\3\3\1\32\13\3\12\0\46\3\53\32\15\0"+
    "\1\32\7\3\12\0\66\3\33\32\2\3\17\0\4\3"+
    "\12\0\306\3\54\32\17\0\145\3\100\32\12\0\25\3"+
    "\10\32\2\3\1\32\2\3\10\32\1\3\2\32\1\3"+
    "\30\32\6\0\1\3\2\0\2\3\4\0\1\32\1\0"+
    "\1\32\2\0\14\3\12\0\106\3\10\32\2\3\47\32"+
    "\7\0\2\3\7\0\1\32\1\3\1\32\1\0\33\3"+
    "\1\32\12\0\50\32\7\0\1\32\4\0\10\3\1\0"+
    "\10\3\1\32\13\0\56\32\20\0\3\3\1\32\42\3"+
    "\71\32\7\3\11\32\1\3\45\32\10\0\1\3\10\0"+
    "\1\32\17\3\12\0\30\3\36\32\2\3\26\0\1\3"+
    "\16\0\111\3\7\32\1\3\2\32\1\3\46\32\6\0"+
    "\3\3\1\0\1\3\2\0\1\3\7\0\1\32\1\0"+
    "\10\3\12\0\6\3\6\32\1\3\2\32\1\3\40\32"+
    "\5\0\1\3\2\0\1\3\5\0\1\32\7\3\12\0"+
    "\u0136\3\23\32\4\0\271\3\1\32\54\3\4\32\37\3"+
    "\232\32\146\3\157\32\21\3\304\32\274\3\57\32\1\3"+
    "\11\0\307\3\107\32\271\3\71\32\7\3\37\32\1\3"+
    "\12\0\146\3\36\32\2\3\5\0\13\3\60\32\7\0"+
    "\11\3\4\32\14\3\12\0\11\3\25\32\5\3\23\32"+
    "\260\3\100\32\200\3\113\32\4\3\1\0\1\32\67\0"+
    "\7\3\4\0\15\32\100\3\2\32\1\3\1\32\1\0"+
    "\13\3\2\0\16\3\370\32\10\3\326\32\52\3\11\32"+
    "\367\3\37\32\61\3\3\32\21\3\4\32\10\3\u018c\32"+
    "\4\3\153\32\5\3\15\32\3\3\11\32\7\3\12\32"+
    "\3\3\2\0\1\3\4\0\301\3\5\0\3\3\26\0"+
    "\2\3\7\0\36\3\4\0\224\3\3\0\273\3\125\32"+
    "\1\3\107\32\1\3\2\32\2\3\1\32\2\3\2\32"+
    "\2\3\4\32\1\3\14\32\1\3\1\32\1\3\7\32"+
    "\1\3\101\32\1\3\4\32\2\3\10\32\1\3\7\32"+
    "\1\3\34\32\1\3\4\32\1\3\5\32\1\3\1\32"+
    "\3\3\7\32\1\3\u0154\32\2\3\31\32\1\3\31\32"+
    "\1\3\37\32\1\3\31\32\1\3\37\32\1\3\31\32"+
    "\1\3\37\32\1\3\31\32\1\3\37\32\1\3\31\32"+
    "\1\3\10\32\2\3\151\0\4\3\62\0\10\3\1\0"+
    "\16\3\1\0\26\3\5\0\1\3\17\0\120\3\7\0"+
    "\1\3\21\0\2\3\7\0\1\3\2\0\1\3\5\0"+
    "\325\3\55\32\3\3\7\0\7\32\2\3\12\0\4\3"+
    "\1\32\u0171\3\54\32\16\0\5\3\306\32\13\3\7\0"+
    "\51\3\104\32\7\0\1\32\4\3\12\0\u0156\3\1\32"+
    "\117\3\4\32\1\3\33\32\1\3\2\32\1\3\1\32"+
    "\2\3\1\32\1\3\12\32\1\3\4\32\1\3\1\32"+
    "\1\3\1\32\6\3\1\32\4\3\1\32\1\3\1\32"+
    "\1\3\1\32\1\3\3\32\1\3\2\32\1\3\1\32"+
    "\2\3\1\32\1\3\1\32\1\3\1\32\1\3\1\32"+
    "\1\3\1\32\1\3\2\32\1\3\1\32\2\3\4\32"+
    "\1\3\7\32\1\3\4\32\1\3\4\32\1\3\1\32"+
    "\1\3\12\32\1\3\21\32\5\3\3\32\1\3\5\32"+
    "\1\3\21\32\u0134\3\12\0\6\3\336\32\42\3\65\32"+
    "\13\3\336\32\2\3\u0182\32\16\3\u0131\32\37\3\36\32"+
    "\342\3\113\32\266\3\1\0\36\3\140\0\200\3\360\0"+
    "\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\14\25\1\1\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\3\0\1\36\1\0\1\16\1\0\1\37"+
    "\1\40\1\41\1\42\1\25\1\43\4\25\1\44\11\25"+
    "\1\45\1\46\1\47\1\50\6\25\1\51\6\25\1\52"+
    "\1\25\1\53\1\25\1\54\5\25\1\55\1\25\1\56"+
    "\1\57\2\25\1\60\1\61\4\25\1\62\2\25\1\63"+
    "\3\25\1\64\1\25\1\65\4\25\1\66\1\67\1\70"+
    "\1\71\1\72\1\25\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\223\0\304\0\223\0\223"+
    "\0\365\0\223\0\u0126\0\223\0\223\0\223\0\u0157\0\223"+
    "\0\u0188\0\223\0\u01b9\0\u01ea\0\223\0\223\0\u021b\0\223"+
    "\0\u024c\0\223\0\365\0\223\0\u027d\0\u02ae\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498"+
    "\0\u04c9\0\u04fa\0\u052b\0\223\0\223\0\223\0\223\0\223"+
    "\0\223\0\u01b9\0\u055c\0\u058d\0\223\0\u05be\0\u05ef\0\u0620"+
    "\0\223\0\223\0\223\0\223\0\u0651\0\365\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\365\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\223\0\u08ff\0\u05be\0\223"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\365\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\365\0\u0b7c\0\223"+
    "\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\365"+
    "\0\u0d04\0\365\0\365\0\u0d35\0\u0d66\0\365\0\365\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\365\0\u0e5b\0\u0e8c\0\365\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\365\0\u0f50\0\365\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\365\0\365\0\365\0\365\0\365\0\u1045\0\365"+
    "\0\365";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\4"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\33\1\36\1\33\1\37"+
    "\1\40\1\41\2\33\1\42\2\33\1\43\1\44\1\45"+
    "\1\46\1\47\1\33\1\50\1\51\1\52\2\53\1\54"+
    "\1\53\1\55\1\53\1\56\24\53\1\57\25\53\10\5"+
    "\1\60\50\5\63\0\1\5\56\0\1\33\6\0\1\33"+
    "\12\0\2\33\6\0\1\33\2\0\23\33\12\0\1\61"+
    "\71\0\1\62\1\63\54\0\1\64\2\0\1\62\1\63"+
    "\4\0\1\65\50\0\1\66\60\0\1\66\1\0\1\67"+
    "\1\24\54\0\1\70\7\0\1\71\1\72\57\0\1\73"+
    "\60\0\1\74\31\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\13\33\1\75\7\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\13\33"+
    "\1\76\7\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\11\33\1\77\1\100\10\33\1\0"+
    "\1\33\6\0\1\33\12\0\2\33\6\0\1\33\2\0"+
    "\1\101\17\33\1\102\2\33\1\0\1\33\6\0\1\33"+
    "\12\0\2\33\6\0\1\33\2\0\5\33\1\103\4\33"+
    "\1\104\10\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\20\33\1\105\2\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\15\33"+
    "\1\106\5\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\4\33\1\107\16\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\17\33"+
    "\1\110\3\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\7\33\1\111\5\33\1\112\5\33"+
    "\1\0\1\33\6\0\1\33\12\0\2\33\6\0\1\33"+
    "\2\0\1\113\22\33\1\0\1\33\6\0\1\33\12\0"+
    "\2\33\6\0\1\33\2\0\7\33\1\114\13\33\61\0"+
    "\1\115\2\53\1\0\1\53\1\0\1\53\1\0\24\53"+
    "\1\0\25\53\20\0\1\66\2\0\1\63\65\0\1\116"+
    "\52\0\2\117\57\0\2\67\54\0\1\120\41\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\13\33"+
    "\1\121\7\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\16\33\1\122\4\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\3\33"+
    "\1\123\17\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\11\33\1\124\11\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\12\33"+
    "\1\125\10\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\17\33\1\126\3\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\17\33"+
    "\1\127\3\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\13\33\1\130\7\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\1\131"+
    "\16\33\1\132\3\33\1\0\1\33\6\0\1\33\12\0"+
    "\2\33\6\0\1\33\2\0\15\33\1\133\5\33\1\0"+
    "\1\33\6\0\1\33\12\0\2\33\6\0\1\33\2\0"+
    "\4\33\1\134\16\33\1\0\1\33\6\0\1\33\12\0"+
    "\2\33\6\0\1\33\2\0\20\33\1\135\2\33\1\0"+
    "\1\33\6\0\1\33\12\0\2\33\6\0\1\33\2\0"+
    "\15\33\1\136\5\33\1\0\1\33\6\0\1\33\12\0"+
    "\2\33\6\0\1\33\2\0\10\33\1\137\12\33\6\0"+
    "\1\140\53\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\11\33\1\141\11\33\1\0\1\33\6\0"+
    "\1\33\12\0\2\33\6\0\1\33\2\0\4\33\1\142"+
    "\16\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\5\33\1\143\2\33\1\144\3\33\1\145"+
    "\5\33\1\146\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\16\33\1\147\4\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\2\33"+
    "\1\150\20\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\4\33\1\151\16\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\2\33"+
    "\1\152\20\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\11\33\1\153\11\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\20\33"+
    "\1\154\2\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\10\33\1\155\12\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\12\33"+
    "\1\156\10\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\4\33\1\157\16\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\11\33"+
    "\1\160\11\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\4\33\1\161\16\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\10\33"+
    "\1\162\12\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\20\33\1\163\2\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\5\33"+
    "\1\164\15\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\15\33\1\165\5\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\7\33"+
    "\1\166\13\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\4\33\1\167\16\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\6\33"+
    "\1\170\14\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\15\33\1\171\5\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\12\33"+
    "\1\172\10\33\1\0\1\33\6\0\1\33\12\0\2\33"+
    "\6\0\1\33\2\0\4\33\1\173\16\33\1\0\1\33"+
    "\6\0\1\33\12\0\2\33\6\0\1\33\2\0\1\174"+
    "\22\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\5\33\1\175\15\33\1\0\1\33\6\0"+
    "\1\33\12\0\2\33\6\0\1\33\2\0\12\33\1\176"+
    "\10\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\13\33\1\177\7\33\1\0\1\33\6\0"+
    "\1\33\12\0\2\33\6\0\1\33\2\0\10\33\1\200"+
    "\12\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\4\33\1\201\16\33\1\0\1\33\6\0"+
    "\1\33\12\0\2\33\6\0\1\33\2\0\12\33\1\202"+
    "\10\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\6\33\1\203\14\33\1\0\1\33\6\0"+
    "\1\33\12\0\2\33\6\0\1\33\2\0\12\33\1\204"+
    "\10\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\2\33\1\205\20\33\1\0\1\33\6\0"+
    "\1\33\12\0\2\33\6\0\1\33\2\0\2\33\1\206"+
    "\20\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\11\33\1\207\11\33\1\0\1\33\6\0"+
    "\1\33\12\0\2\33\6\0\1\33\2\0\15\33\1\210"+
    "\5\33\1\0\1\33\6\0\1\33\12\0\2\33\6\0"+
    "\1\33\2\0\4\33\1\211\16\33\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4214];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\2\11\1\1\1\11\1\1\3\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\17\1\6\11\3\0\1\11"+
    "\1\0\1\1\1\0\4\11\20\1\1\11\2\1\1\11"+
    "\17\1\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(ParserSym.EOF);
            }  // fall though
            case 138: break;
            case STRING: {
              throw new EOFException("Stringa costante non completata");
            }  // fall though
            case 139: break;
            case COMMENT: {
              throw new EOFException("Commento non chiuso");
            }  // fall though
            case 140: break;
            default:
              {
                return symbol(ParserSym.EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Error:(" + (yyline+1) + ":" + (yycolumn+1) + ") Simbolo non riconosciuto '"+yytext()+"'");
            }
            // fall through
          case 61: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 62: break;
          case 3:
            { return symbol(ParserSym.NOT);
            }
            // fall through
          case 63: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 64: break;
          case 5:
            { return symbol(ParserSym.DOLLARSIGN);
            }
            // fall through
          case 65: break;
          case 6:
            { yybegin(COMMENT);
            }
            // fall through
          case 66: break;
          case 7:
            { return symbol(ParserSym.LPAR);
            }
            // fall through
          case 67: break;
          case 8:
            { return symbol(ParserSym.RPAR);
            }
            // fall through
          case 68: break;
          case 9:
            { return symbol(ParserSym.TIMES);
            }
            // fall through
          case 69: break;
          case 10:
            { return symbol(ParserSym.PLUS);
            }
            // fall through
          case 70: break;
          case 11:
            { return symbol(ParserSym.COMMA);
            }
            // fall through
          case 71: break;
          case 12:
            { return symbol(ParserSym.MINUS);
            }
            // fall through
          case 72: break;
          case 13:
            { return symbol(ParserSym.DIV);
            }
            // fall through
          case 73: break;
          case 14:
            { return symbol(ParserSym.INTEGER_CONST, Integer.parseInt(yytext()));
            }
            // fall through
          case 74: break;
          case 15:
            { return symbol(ParserSym.COLON);
            }
            // fall through
          case 75: break;
          case 16:
            { return symbol(ParserSym.SEMI);
            }
            // fall through
          case 76: break;
          case 17:
            { return symbol(ParserSym.LT);
            }
            // fall through
          case 77: break;
          case 18:
            { return symbol(ParserSym.EQ);
            }
            // fall through
          case 78: break;
          case 19:
            { return symbol(ParserSym.GT);
            }
            // fall through
          case 79: break;
          case 20:
            { return symbol(ParserSym.REF);
            }
            // fall through
          case 80: break;
          case 21:
            { return symbol(ParserSym.ID, yytext());
            }
            // fall through
          case 81: break;
          case 22:
            { return symbol(ParserSym.ENDVAR);
            }
            // fall through
          case 82: break;
          case 23:
            { string.append( yytext() );
            }
            // fall through
          case 83: break;
          case 24:
            { string.append('\n');
            }
            // fall through
          case 84: break;
          case 25:
            { string.append('\r');
            }
            // fall through
          case 85: break;
          case 26:
            { yybegin(YYINITIAL);
    return symbol(ParserSym.STRING_CONST, string.toString());
            }
            // fall through
          case 86: break;
          case 27:
            { string.append('\\');
            }
            // fall through
          case 87: break;
          case 28:
            { /* end comment */
        yybegin(YYINITIAL);
        /* ignore */
            }
            // fall through
          case 88: break;
          case 29:
            { return symbol(ParserSym.AND);
            }
            // fall through
          case 89: break;
          case 30:
            { return symbol(ParserSym.TYPERETURN);
            }
            // fall through
          case 90: break;
          case 31:
            { return symbol(ParserSym.LE);
            }
            // fall through
          case 91: break;
          case 32:
            { return symbol(ParserSym.NE);
            }
            // fall through
          case 92: break;
          case 33:
            { return symbol(ParserSym.GE);
            }
            // fall through
          case 93: break;
          case 34:
            { return symbol(ParserSym.ASSIGN);
            }
            // fall through
          case 94: break;
          case 35:
            { return symbol(ParserSym.DO);
            }
            // fall through
          case 95: break;
          case 36:
            { return symbol(ParserSym.IF);
            }
            // fall through
          case 96: break;
          case 37:
            { return symbol(ParserSym.OR);
            }
            // fall through
          case 97: break;
          case 38:
            { return symbol(ParserSym.WRITE);
            }
            // fall through
          case 98: break;
          case 39:
            { return symbol(ParserSym.REAL_CONST, Float.parseFloat(yytext()));
            }
            // fall through
          case 99: break;
          case 40:
            { return symbol(ParserSym.READ);
            }
            // fall through
          case 100: break;
          case 41:
            { return symbol(ParserSym.OUT);
            }
            // fall through
          case 101: break;
          case 42:
            { return symbol(ParserSym.VAR);
            }
            // fall through
          case 102: break;
          case 43:
            { return symbol(ParserSym.WRITERETURN);
            }
            // fall through
          case 103: break;
          case 44:
            { return symbol(ParserSym.ELSE);
            }
            // fall through
          case 104: break;
          case 45:
            { return symbol(ParserSym.FUNCTION);
            }
            // fall through
          case 105: break;
          case 46:
            { return symbol(ParserSym.PROCEDURE);
            }
            // fall through
          case 106: break;
          case 47:
            { return symbol(ParserSym.REAL);
            }
            // fall through
          case 107: break;
          case 48:
            { return symbol(ParserSym.THEN);
            }
            // fall through
          case 108: break;
          case 49:
            { return symbol(ParserSym.TRUE);
            }
            // fall through
          case 109: break;
          case 50:
            { return symbol(ParserSym.ENDIF);
            }
            // fall through
          case 110: break;
          case 51:
            { return symbol(ParserSym.FALSE);
            }
            // fall through
          case 111: break;
          case 52:
            { return symbol(ParserSym.WHILE);
            }
            // fall through
          case 112: break;
          case 53:
            { return symbol(ParserSym.ELIF);
            }
            // fall through
          case 113: break;
          case 54:
            { return symbol(ParserSym.RETURN);
            }
            // fall through
          case 114: break;
          case 55:
            { return symbol(ParserSym.STRING);
            }
            // fall through
          case 115: break;
          case 56:
            { return symbol(ParserSym.BOOLEAN);
            }
            // fall through
          case 116: break;
          case 57:
            { return symbol(ParserSym.ENDFUNCTION);
            }
            // fall through
          case 117: break;
          case 58:
            { return symbol(ParserSym.ENDPROCEDURE);
            }
            // fall through
          case 118: break;
          case 59:
            { return symbol(ParserSym.INTEGER);
            }
            // fall through
          case 119: break;
          case 60:
            { return symbol(ParserSym.ENDWHILE);
            }
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
