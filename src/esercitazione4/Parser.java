
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4;

import java_cup.runtime.*;
import esercitazione4.Expression.*;
import esercitazione4.Node.*;
import esercitazione4.Statement.*;
import esercitazione4.Expression.ConstOP.*;
import esercitazione4.Expression.Operation.*;
import esercitazione4.Expression.RelOp.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\005\004\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\014\000\002\014" +
    "\006\000\002\014\002\000\002\015\007\000\002\015\002" +
    "\000\002\016\005\000\002\016\003\000\002\017\012\000" +
    "\002\020\006\000\002\020\002\000\002\021\007\000\002" +
    "\021\002\000\002\022\003\000\002\022\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\002\000\002\024\006" +
    "\000\002\024\004\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\025\006\000\002\025\005\000\002\026" +
    "\006\000\002\026\005\000\002\027\011\000\002\030\004" +
    "\000\002\030\002\000\002\031\006\000\002\032\004\000" +
    "\002\032\002\000\002\033\007\000\002\034\003\000\002" +
    "\034\010\000\002\034\007\000\002\034\002\000\002\035" +
    "\005\000\002\035\006\000\002\035\003\000\002\035\004" +
    "\000\002\036\005\000\002\036\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\004\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\010\004\004\020\011\025\ufffd\001\002\000" +
    "\004\010\161\001\002\000\004\002\266\001\002\000\010" +
    "\004\004\020\011\025\ufffd\001\002\000\010\004\004\020" +
    "\011\025\ufffd\001\002\000\004\025\230\001\002\000\004" +
    "\010\012\001\002\000\004\023\013\001\002\000\006\010" +
    "\014\024\uffe4\001\002\000\004\005\220\001\002\000\004" +
    "\024\016\001\002\000\004\021\017\001\002\000\012\013" +
    "\023\014\020\015\021\016\024\001\002\000\012\005\uffe9" +
    "\007\uffe9\011\uffe9\024\uffe9\001\002\000\012\005\uffe8\007" +
    "\uffe8\011\uffe8\024\uffe8\001\002\000\006\005\uffe0\011\216" +
    "\001\002\000\012\005\uffea\007\uffea\011\uffea\024\uffea\001" +
    "\002\000\012\005\uffe7\007\uffe7\011\uffe7\024\uffe7\001\002" +
    "\000\004\005\026\001\002\000\024\004\004\010\037\017" +
    "\044\022\uffd6\030\040\031\041\033\027\034\036\041\031" +
    "\001\002\000\030\007\uffbf\010\057\012\050\023\052\032" +
    "\130\045\045\060\060\064\056\065\046\066\051\067\054" +
    "\001\002\000\004\006\211\001\002\000\024\010\057\012" +
    "\050\023\052\045\045\060\060\064\056\065\046\066\051" +
    "\067\054\001\002\000\004\007\204\001\002\000\004\007" +
    "\203\001\002\000\004\007\202\001\002\000\036\004\004" +
    "\010\037\017\044\022\uffd6\026\uffd6\030\040\031\041\033" +
    "\027\034\036\036\uffd6\037\uffd6\040\uffd6\041\031\043\uffd6" +
    "\001\002\000\024\010\057\012\050\023\052\045\045\060" +
    "\060\064\056\065\046\066\051\067\054\001\002\000\010" +
    "\006\ufff2\011\145\023\146\001\002\000\030\007\uffbf\010" +
    "\057\012\050\023\052\032\130\045\045\060\060\064\056" +
    "\065\046\066\051\067\054\001\002\000\030\007\uffbf\010" +
    "\057\012\050\023\052\032\130\045\045\060\060\064\056" +
    "\065\046\066\051\067\054\001\002\000\036\004\004\010" +
    "\037\017\044\022\uffd6\026\uffd6\030\040\031\041\033\027" +
    "\034\036\036\uffd6\037\uffd6\040\uffd6\041\031\043\uffd6\001" +
    "\002\000\004\022\124\001\002\000\024\010\057\012\050" +
    "\023\052\045\045\060\060\064\056\065\046\066\051\067" +
    "\054\001\002\000\024\010\057\012\050\023\052\045\045" +
    "\060\060\064\056\065\046\066\051\067\054\001\002\000" +
    "\046\007\uffb7\011\uffb7\024\uffb7\032\uffb7\035\uffb7\042\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002" +
    "\000\040\007\uffb9\011\121\024\uffb9\044\065\045\062\046" +
    "\072\047\070\050\066\051\073\052\074\053\067\054\071" +
    "\055\064\056\063\057\075\001\002\000\046\007\uffb5\011" +
    "\uffb5\024\uffb5\032\uffb5\035\uffb5\042\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\001\002\000\046\007\uffb3" +
    "\011\uffb3\024\uffb3\032\uffb3\035\uffb3\042\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000\024\010" +
    "\057\012\050\023\052\045\045\060\060\064\056\065\046" +
    "\066\051\067\054\001\002\000\004\007\116\001\002\000" +
    "\046\007\uffb2\011\uffb2\024\uffb2\032\uffb2\035\uffb2\042\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002" +
    "\000\046\007\uffb8\011\uffb8\024\uffb8\032\uffb8\035\uffb8\042" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\001" +
    "\002\000\046\007\uffb6\011\uffb6\024\uffb6\032\uffb6\035\uffb6" +
    "\042\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\001\002\000\050\007\uffb4\011\uffb4\023\112\024\uffb4\032" +
    "\uffb4\035\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056" +
    "\uffb4\057\uffb4\001\002\000\024\010\057\012\050\023\052" +
    "\045\045\060\060\064\056\065\046\066\051\067\054\001" +
    "\002\000\046\007\uffa3\011\uffa3\024\uffa3\032\uffa3\035\uffa3" +
    "\042\uffa3\044\065\045\062\046\072\047\070\050\066\051" +
    "\073\052\074\053\067\054\071\055\064\056\uffa3\057\uffa3" +
    "\001\002\000\024\010\057\012\050\023\052\045\045\060" +
    "\060\064\056\065\046\066\051\067\054\001\002\000\024" +
    "\010\057\012\050\023\052\045\045\060\060\064\056\065" +
    "\046\066\051\067\054\001\002\000\024\010\057\012\050" +
    "\023\052\045\045\060\060\064\056\065\046\066\051\067" +
    "\054\001\002\000\024\010\057\012\050\023\052\045\045" +
    "\060\060\064\056\065\046\066\051\067\054\001\002\000" +
    "\024\010\057\012\050\023\052\045\045\060\060\064\056" +
    "\065\046\066\051\067\054\001\002\000\024\010\057\012" +
    "\050\023\052\045\045\060\060\064\056\065\046\066\051" +
    "\067\054\001\002\000\024\010\057\012\050\023\052\045" +
    "\045\060\060\064\056\065\046\066\051\067\054\001\002" +
    "\000\024\010\057\012\050\023\052\045\045\060\060\064" +
    "\056\065\046\066\051\067\054\001\002\000\024\010\057" +
    "\012\050\023\052\045\045\060\060\064\056\065\046\066" +
    "\051\067\054\001\002\000\024\010\057\012\050\023\052" +
    "\045\045\060\060\064\056\065\046\066\051\067\054\001" +
    "\002\000\024\010\057\012\050\023\052\045\045\060\060" +
    "\064\056\065\046\066\051\067\054\001\002\000\024\010" +
    "\057\012\050\023\052\045\045\060\060\064\056\065\046" +
    "\066\051\067\054\001\002\000\046\007\uffac\011\uffac\024" +
    "\uffac\032\uffac\035\uffac\042\uffac\044\065\045\062\046\072" +
    "\047\070\050\066\051\073\052\074\053\067\054\071\055" +
    "\064\056\063\057\uffac\001\002\000\032\007\uffa9\011\uffa9" +
    "\024\uffa9\032\uffa9\035\uffa9\042\uffa9\044\065\045\062\046" +
    "\072\047\070\056\uffa9\057\uffa9\001\002\000\032\007\uffa6" +
    "\011\uffa6\024\uffa6\032\uffa6\035\uffa6\042\uffa6\044\065\045" +
    "\062\046\072\047\070\056\uffa6\057\uffa6\001\002\000\046" +
    "\007\uffaf\011\uffaf\024\uffaf\032\uffaf\035\uffaf\042\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002\000" +
    "\032\007\uffab\011\uffab\024\uffab\032\uffab\035\uffab\042\uffab" +
    "\044\065\045\062\046\072\047\070\056\uffab\057\uffab\001" +
    "\002\000\046\007\uffae\011\uffae\024\uffae\032\uffae\035\uffae" +
    "\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\001\002\000\032\007\uffa8\011\uffa8\024\uffa8\032\uffa8\035" +
    "\uffa8\042\uffa8\044\065\045\062\046\072\047\070\056\uffa8" +
    "\057\uffa8\001\002\000\032\007\uffa7\011\uffa7\024\uffa7\032" +
    "\uffa7\035\uffa7\042\uffa7\044\065\045\062\046\072\047\070" +
    "\056\uffa7\057\uffa7\001\002\000\046\007\uffb1\011\uffb1\024" +
    "\uffb1\032\uffb1\035\uffb1\042\uffb1\044\uffb1\045\uffb1\046\072" +
    "\047\070\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\001\002\000\032\007\uffaa\011\uffaa" +
    "\024\uffaa\032\uffaa\035\uffaa\042\uffaa\044\065\045\062\046" +
    "\072\047\070\056\uffaa\057\uffaa\001\002\000\046\007\uffad" +
    "\011\uffad\024\uffad\032\uffad\035\uffad\042\uffad\044\065\045" +
    "\062\046\072\047\070\050\066\051\073\052\074\053\067" +
    "\054\071\055\064\056\uffad\057\uffad\001\002\000\046\007" +
    "\uffb0\011\uffb0\024\uffb0\032\uffb0\035\uffb0\042\uffb0\044\uffb0" +
    "\045\uffb0\046\072\047\070\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\001\002\000\026" +
    "\010\057\012\050\023\052\024\114\045\045\060\060\064" +
    "\056\065\046\066\051\067\054\001\002\000\004\024\115" +
    "\001\002\000\046\007\uffcc\011\uffcc\024\uffcc\032\uffcc\035" +
    "\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\001\002\000\046\007\uffcd\011\uffcd\024\uffcd\032\uffcd" +
    "\035\uffcd\042\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\001\002\000\036\004\uffd3\010\uffd3\017\uffd3\022" +
    "\uffd3\026\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\043\uffd3\001\002\000\034\024" +
    "\120\044\065\045\062\046\072\047\070\050\066\051\073" +
    "\052\074\053\067\054\071\055\064\056\063\057\075\001" +
    "\002\000\046\007\uffa5\011\uffa5\024\uffa5\032\uffa5\035\uffa5" +
    "\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\001\002\000\024\010\057\012\050\023\052\045\045\060" +
    "\060\064\056\065\046\066\051\067\054\001\002\000\006" +
    "\007\uffba\024\uffba\001\002\000\046\007\uffa4\011\uffa4\024" +
    "\uffa4\032\uffa4\035\uffa4\042\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\001\002\000\012\002\uffe6\004\uffe6" +
    "\020\uffe6\025\uffe6\001\002\000\016\022\uffd7\026\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\043\uffd7\001\002\000\036\007\uffc2" +
    "\032\136\044\065\045\062\046\072\047\070\050\066\051" +
    "\073\052\074\053\067\054\071\055\064\056\063\057\075" +
    "\001\002\000\004\007\135\001\002\000\004\023\131\001" +
    "\002\000\024\010\057\012\050\023\052\045\045\060\060" +
    "\064\056\065\046\066\051\067\054\001\002\000\034\024" +
    "\133\044\065\045\062\046\072\047\070\050\066\051\073" +
    "\052\074\053\067\054\071\055\064\056\063\057\075\001" +
    "\002\000\030\007\uffbf\010\057\012\050\023\052\032\130" +
    "\045\045\060\060\064\056\065\046\066\051\067\054\001" +
    "\002\000\004\007\uffc0\001\002\000\036\004\uffd1\010\uffd1" +
    "\017\uffd1\022\uffd1\026\uffd1\030\uffd1\031\uffd1\033\uffd1\034" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\001\002" +
    "\000\004\023\137\001\002\000\024\010\057\012\050\023" +
    "\052\045\045\060\060\064\056\065\046\066\051\067\054" +
    "\001\002\000\034\024\141\044\065\045\062\046\072\047" +
    "\070\050\066\051\073\052\074\053\067\054\071\055\064" +
    "\056\063\057\075\001\002\000\030\007\uffbf\010\057\012" +
    "\050\023\052\032\130\045\045\060\060\064\056\065\046" +
    "\066\051\067\054\001\002\000\004\007\uffc1\001\002\000" +
    "\004\007\144\001\002\000\036\004\uffd2\010\uffd2\017\uffd2" +
    "\022\uffd2\026\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2\001\002\000\004" +
    "\010\161\001\002\000\030\010\057\012\050\023\052\024" +
    "\152\045\045\060\060\062\151\064\056\065\046\066\051" +
    "\067\054\001\002\000\004\024\160\001\002\000\036\011" +
    "\156\024\uffbc\044\065\045\062\046\072\047\070\050\066" +
    "\051\073\052\074\053\067\054\071\055\064\056\063\057" +
    "\075\001\002\000\004\010\153\001\002\000\004\007\uffca" +
    "\001\002\000\006\011\154\024\uffbb\001\002\000\026\010" +
    "\057\012\050\023\052\045\045\060\060\062\151\064\056" +
    "\065\046\066\051\067\054\001\002\000\004\024\uffbd\001" +
    "\002\000\026\010\057\012\050\023\052\045\045\060\060" +
    "\062\151\064\056\065\046\066\051\067\054\001\002\000" +
    "\004\024\uffbe\001\002\000\004\007\uffcb\001\002\000\010" +
    "\005\ufff2\006\ufff2\011\145\001\002\000\006\005\ufff3\006" +
    "\ufff3\001\002\000\034\035\164\044\065\045\062\046\072" +
    "\047\070\050\066\051\073\052\074\053\067\054\071\055" +
    "\064\056\063\057\075\001\002\000\030\004\004\010\037" +
    "\017\044\030\040\031\041\033\027\034\036\036\uffd6\037" +
    "\uffd6\040\uffd6\041\031\001\002\000\010\036\uffc7\037\uffc7" +
    "\040\167\001\002\000\006\036\175\037\uffc4\001\002\000" +
    "\024\010\057\012\050\023\052\045\045\060\060\064\056" +
    "\065\046\066\051\067\054\001\002\000\010\036\uffc7\037" +
    "\uffc7\040\167\001\002\000\006\036\uffc8\037\uffc8\001\002" +
    "\000\034\035\173\044\065\045\062\046\072\047\070\050" +
    "\066\051\073\052\074\053\067\054\071\055\064\056\063" +
    "\057\075\001\002\000\030\004\004\010\037\017\044\030" +
    "\040\031\041\033\027\034\036\036\uffd6\037\uffd6\040\uffd6" +
    "\041\031\001\002\000\010\036\uffc6\037\uffc6\040\uffc6\001" +
    "\002\000\024\004\004\010\037\017\044\030\040\031\041" +
    "\033\027\034\036\037\uffd6\041\031\001\002\000\004\037" +
    "\177\001\002\000\004\007\uffc9\001\002\000\004\037\uffc5" +
    "\001\002\000\016\022\uffd8\026\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\043\uffd8\001\002\000\036\004\uffcf\010\uffcf\017\uffcf" +
    "\022\uffcf\026\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\001\002\000\036" +
    "\004\uffd4\010\uffd4\017\uffd4\022\uffd4\026\uffd4\030\uffd4\031" +
    "\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\043\uffd4\001\002\000\036\004\uffce\010\uffce\017\uffce\022" +
    "\uffce\026\uffce\030\uffce\031\uffce\033\uffce\034\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\043\uffce\001\002\000\034\042" +
    "\206\044\065\045\062\046\072\047\070\050\066\051\073" +
    "\052\074\053\067\054\071\055\064\056\063\057\075\001" +
    "\002\000\024\004\004\010\037\017\044\030\040\031\041" +
    "\033\027\034\036\041\031\043\uffd6\001\002\000\004\043" +
    "\210\001\002\000\004\007\uffc3\001\002\000\024\010\057" +
    "\012\050\023\052\045\045\060\060\064\056\065\046\066" +
    "\051\067\054\001\002\000\004\007\213\001\002\000\036" +
    "\004\uffd5\010\uffd5\017\uffd5\022\uffd5\026\uffd5\030\uffd5\031" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\043\uffd5\001\002\000\004\007\215\001\002\000\036\004" +
    "\uffd0\010\uffd0\017\uffd0\022\uffd0\026\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043" +
    "\uffd0\001\002\000\012\013\023\014\020\015\021\016\024" +
    "\001\002\000\004\005\uffe1\001\002\000\012\013\023\014" +
    "\020\015\021\016\024\001\002\000\006\011\222\024\uffe2" +
    "\001\002\000\004\010\224\001\002\000\004\024\uffe5\001" +
    "\002\000\004\005\225\001\002\000\012\013\023\014\020" +
    "\015\021\016\024\001\002\000\006\011\222\024\uffe2\001" +
    "\002\000\004\024\uffe3\001\002\000\004\010\241\001\002" +
    "\000\012\002\ufff9\004\004\020\011\025\230\001\002\000" +
    "\012\002\ufff9\004\004\020\011\025\230\001\002\000\012" +
    "\002\ufff9\004\004\020\011\025\230\001\002\000\004\002" +
    "\001\001\002\000\012\002\ufff9\004\004\020\011\025\230" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufffb\001\002\000\004\023\242\001\002" +
    "\000\010\010\243\024\uffdd\027\244\001\002\000\004\005" +
    "\uffda\001\002\000\004\010\263\001\002\000\004\024\257" +
    "\001\002\000\004\005\247\001\002\000\012\013\023\014" +
    "\020\015\021\016\024\001\002\000\006\011\251\024\uffdb" +
    "\001\002\000\006\010\243\027\244\001\002\000\004\024" +
    "\uffde\001\002\000\004\005\254\001\002\000\012\013\023" +
    "\014\020\015\021\016\024\001\002\000\006\011\251\024" +
    "\uffdb\001\002\000\004\024\uffdc\001\002\000\004\005\260" +
    "\001\002\000\024\004\004\010\037\017\044\026\uffd6\030" +
    "\040\031\041\033\027\034\036\041\031\001\002\000\004" +
    "\026\262\001\002\000\012\002\uffdf\004\uffdf\020\uffdf\025" +
    "\uffdf\001\002\000\004\005\uffd9\001\002\000\004\025\uffff" +
    "\001\002\000\004\025\ufffe\001\002\000\004\002\000\001" +
    "\002\000\006\005\271\006\272\001\002\000\044\002\ufff8" +
    "\004\ufff8\010\ufff8\017\ufff8\020\ufff8\022\ufff8\025\ufff8\026" +
    "\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\043\ufff8\001\002\000\012\013\023\014" +
    "\020\015\021\016\024\001\002\000\014\012\273\064\274" +
    "\065\277\066\276\067\300\001\002\000\006\007\uffed\011" +
    "\uffed\001\002\000\006\007\uffee\011\uffee\001\002\000\004" +
    "\007\304\001\002\000\006\007\uffec\011\uffec\001\002\000" +
    "\006\007\uffef\011\uffef\001\002\000\006\007\uffeb\011\uffeb" +
    "\001\002\000\006\007\ufff0\011\302\001\002\000\014\012" +
    "\273\064\274\065\277\066\276\067\300\001\002\000\004" +
    "\007\ufff1\001\002\000\006\010\161\061\306\001\002\000" +
    "\044\002\ufff6\004\ufff6\010\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\025\ufff6\026\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\001\002\000\044" +
    "\002\ufff4\004\ufff4\010\ufff4\017\ufff4\020\ufff4\022\ufff4\025" +
    "\ufff4\026\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\043\ufff4\001\002\000\004\007" +
    "\310\001\002\000\006\010\161\061\312\001\002\000\044" +
    "\002\ufff7\004\ufff7\010\ufff7\017\ufff7\020\ufff7\022\ufff7\025" +
    "\ufff7\026\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\043\ufff7\001\002\000\044\002" +
    "\ufff5\004\ufff5\010\ufff5\017\ufff5\020\ufff5\022\ufff5\025\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\043\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\012\002\004\003\007\005\006\013\005\001" +
    "\001\000\006\006\267\007\266\001\001\000\002\001\001" +
    "\000\010\003\264\005\006\013\005\001\001\000\010\003" +
    "\263\005\006\013\005\001\001\000\004\017\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\021\016\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\023" +
    "\042\024\041\026\032\027\033\033\031\001\001\000\010" +
    "\025\054\034\213\037\125\001\001\000\002\001\001\000" +
    "\006\025\054\037\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\023" +
    "\200\024\041\026\032\027\033\033\031\001\001\000\006" +
    "\025\054\037\162\001\001\000\002\001\001\000\010\025" +
    "\054\034\142\037\125\001\001\000\010\025\054\034\126" +
    "\037\125\001\001\000\020\005\034\007\027\023\124\024" +
    "\041\026\032\027\033\033\031\001\001\000\002\001\001" +
    "\000\010\025\054\036\052\037\046\001\001\000\006\025" +
    "\054\037\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\054\037" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\054\037\060\001\001\000\002\001\001\000\006\025\054" +
    "\037\110\001\001\000\006\025\054\037\107\001\001\000" +
    "\006\025\054\037\106\001\001\000\006\025\054\037\105" +
    "\001\001\000\006\025\054\037\104\001\001\000\006\025" +
    "\054\037\103\001\001\000\006\025\054\037\102\001\001" +
    "\000\006\025\054\037\101\001\001\000\006\025\054\037" +
    "\100\001\001\000\006\025\054\037\077\001\001\000\006" +
    "\025\054\037\076\001\001\000\006\025\054\037\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\054\036\112\037\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\054\036\121\037\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\054\037\131\001\001\000" +
    "\002\001\001\000\010\025\054\034\133\037\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\054\037\137\001\001\000\002\001\001\000\010" +
    "\025\054\034\141\037\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\161\001\001" +
    "\000\010\025\054\035\146\037\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\054\035\154\037\147\001" +
    "\001\000\002\001\001\000\010\025\054\035\156\037\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\005\034" +
    "\007\027\023\164\024\041\026\032\027\033\033\031\001" +
    "\001\000\006\030\165\031\167\001\001\000\004\032\175" +
    "\001\001\000\006\025\054\037\171\001\001\000\006\030" +
    "\170\031\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\034\007\027\023\173\024\041\026\032\027" +
    "\033\033\031\001\001\000\002\001\001\000\020\005\034" +
    "\007\027\023\177\024\041\026\032\027\033\033\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\034\007\027" +
    "\023\206\024\041\026\032\027\033\033\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\054\036\211" +
    "\037\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\021\016\216" +
    "\001\001\000\002\001\001\000\004\012\220\001\001\000" +
    "\004\015\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\225\001\001\000\004\015" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\233\005\232\013\231\017\234\001\001\000\012\004" +
    "\237\005\232\013\231\017\234\001\001\000\012\004\236" +
    "\005\232\013\231\017\234\001\001\000\002\001\001\000" +
    "\012\004\235\005\232\013\231\017\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\244\022\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\247\001\001\000\004\021\251\001\001\000\004" +
    "\022\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\254\001\001\000\004\021\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\023" +
    "\260\024\041\026\032\027\033\033\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\306\001\001\000\006\010" +
    "\274\011\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\302\011\300" +
    "\001\001\000\002\001\001\000\006\006\304\007\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\310\007\266\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol s){
        System.out.println("Syntax error at line " + s.left
            + " column " + s.right);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Iter1 Procedure Iter2 
            {
              ProgramOp RESULT =null;
		int iter1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iter1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IterOp iter1 = (IterOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int procedureleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procedureright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcedureOp procedure = (ProcedureOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iter2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iter2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterOp iter2 = (IterOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<VarDeclOp> varDecls = iter1.getVarDecls();
                varDecls.addAll(iter2.getVarDecls());
               LinkedList<FunOp> func = iter1.getFunctions();
               func.addAll(iter2.getFunctions());
               LinkedList<ProcedureOp> proc = iter2.getProcedures();
               proc.add(procedure);
               RESULT = new ProgramOp(varDecls, func, proc);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter1 ::= VarDecl Iter1 
            {
              IterOp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDeclOp> var = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<VarDeclOp>  varDecl = iter.getVarDecls();
                        varDecl.addAll(var);
                        RESULT = iter;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter1 ::= Function Iter1 
            {
              IterOp RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunOp func = (FunOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<FunOp>  function = iter.getFunctions();
                        function.add(func);
                        RESULT = iter;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter1 ::= 
            {
              IterOp RESULT =null;
		 LinkedList<VarDeclOp> varDecl = new LinkedList<>();
                       LinkedList<FunOp> func = new LinkedList<>();
                       RESULT = new IterOp(varDecl, func);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter2 ::= VarDecl Iter2 
            {
              IterOp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDeclOp> var = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<VarDeclOp>  varDecl = iter.getVarDecls();
               varDecl.addAll(var);
               RESULT = iter; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter2 ::= Function Iter2 
            {
              IterOp RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunOp func = (FunOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<FunOp>  function = iter.getFunctions();
               function.add(func);
               RESULT = iter;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter2 ::= Procedure Iter2 
            {
              IterOp RESULT =null;
		int procedureleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int procedureright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcedureOp procedure = (ProcedureOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int iterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IterOp iter = (IterOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<ProcedureOp> proc = iter.getProcedures();
               proc.add(procedure);
               RESULT = iter;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter2 ::= 
            {
              IterOp RESULT =null;
		 LinkedList<VarDeclOp> varDecl = new LinkedList<>();
                       LinkedList<FunOp> func = new LinkedList<>();
                       LinkedList<ProcedureOp> proc = new LinkedList<>();
                       RESULT = new IterOp(varDecl, func, proc);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<VarDeclOp> decList = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = decList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdOp> idList = (LinkedList<IdOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<VarDeclOp> decList = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 decList.add(new VarDeclOp(idList,type));
            	        RESULT = decList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdOp> idList = (LinkedList<IdOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expr> constList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<VarDeclOp> decList = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 decList.add(new VarDeclOp(idList,constList));
	        RESULT = decList;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdOp> idList = (LinkedList<IdOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 LinkedList<VarDeclOp> decList = new LinkedList<> ();
	        decList.add(new VarDeclOp(idList,type));
	        RESULT = decList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<IdOp> idList = (LinkedList<IdOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expr> constList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 LinkedList<VarDeclOp> decList = new LinkedList<> ();
            decList.add(new VarDeclOp(idList,constList));
            RESULT = decList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              LinkedList<IdOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<IdOp> idList = (LinkedList<IdOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 idList.add(new IdOp(id));
                    RESULT = idList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              LinkedList<IdOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<IdOp> idList = new LinkedList<>();
                idList.add(new IdOp(id));
                RESULT = idList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> constList = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 constList.add(expr);
                     RESULT = constList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  LinkedList<Expr> constList = new LinkedList<>();
	                 constList.add(expr);
	                 RESULT = constList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= REAL_CONST 
            {
              Expr RESULT =null;
		int lexemeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexemeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float lexeme = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealOp(lexeme); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int lexemeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexemeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer lexeme = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerOp(lexeme); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= STRING_CONST 
            {
              Expr RESULT =null;
		int lexemeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexemeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lexeme = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringOp(lexeme); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueOp(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseOp(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp("float"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INTEGER 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= BOOLEAN 
            {
              TypeOp RESULT =null;
		 RESULT = new TypeOp("Boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              FunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<FuncParamsOp> params = (LinkedList<FuncParamsOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<TypeOp> type = (LinkedList<TypeOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunOp(new IdOp(id), params, type, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              LinkedList<FuncParamsOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int otherParamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otherParamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<FuncParamsOp> otherParams = (LinkedList<FuncParamsOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 otherParams.add(new FuncParamsOp(new IdOp(id), type));
                  RESULT = otherParams; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncParams ::= 
            {
              LinkedList<FuncParamsOp> RESULT =null;
		 RESULT = new LinkedList<FuncParamsOp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              LinkedList<FuncParamsOp> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int otherParamsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otherParamsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<FuncParamsOp> otherParams = (LinkedList<FuncParamsOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 otherParams.add(new FuncParamsOp(new IdOp(id), type));
                         RESULT = otherParams;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OtherFuncParams ::= 
            {
              LinkedList<FuncParamsOp> RESULT =null;
		  RESULT = new LinkedList<FuncParamsOp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Types ::= Type COMMA Types 
            {
              LinkedList<TypeOp> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<TypeOp> typeList = (LinkedList<TypeOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 typeList.add(type);
                    RESULT = typeList;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Types ::= Type 
            {
              LinkedList<TypeOp> RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<TypeOp> typeList = new LinkedList<>();
	               typeList.add(type);
	               RESULT = typeList;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              ProcedureOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<ProcParamsOp> params = (LinkedList<ProcParamsOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcedureOp(new IdOp(id), params, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedure",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              LinkedList<ProcParamsOp> RESULT =null;
		int paramIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ProcParamIdOp paramId = (ProcParamIdOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcParamsOp> paramList = (LinkedList<ProcParamsOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 paramList.add(new ProcParamsOp(paramId, type));
                 RESULT = paramList;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParams",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= 
            {
              LinkedList<ProcParamsOp> RESULT =null;
		RESULT = new LinkedList<ProcParamsOp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParams",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              LinkedList<ProcParamsOp> RESULT =null;
		int paramIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ProcParamIdOp paramId = (ProcParamIdOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ProcParamsOp> paramList = (LinkedList<ProcParamsOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 paramList.add(new ProcParamsOp(paramId, type));
                        RESULT = paramList;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherProcParams ::= 
            {
              LinkedList<ProcParamsOp> RESULT =null;
		 RESULT = new LinkedList<ProcParamsOp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= ID 
            {
              ProcParamIdOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProcParamIdOp(new IdOp(id), false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ProcParamId ::= OUT ID 
            {
              ProcParamIdOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProcParamIdOp(new IdOp(id), true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              BodyOp RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<VarDeclOp> varDecl = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 body.getVarDecl().addAll(varDecl);
                                       RESULT = body;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              BodyOp RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 body.getStmt().add(stat);
	                         RESULT = body;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              BodyOp RESULT =null;
		 LinkedList<VarDeclOp> varDecl = new LinkedList<> ();
	                 LinkedList<Statement> statement = new LinkedList<> ();
                     RESULT = new BodyOp(varDecl, statement); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              Statement RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<IdOp> ids = (LinkedList<IdOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprs = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AssignStatOp(ids, exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              Statement RESULT =null;
		int proCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int proCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcCallOp proCall = (ProcCallOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = proCall; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              Statement RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprs = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStatOp(exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              Statement RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> args = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteOp(false,args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              Statement RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> args = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WriteOp(true,args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              Statement RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> args = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadOp(args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              Statement RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ifStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              Statement RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileStatOp whileStat = (WhileStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = whileStat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> exprs = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallOp(new IdOp(id), exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallOp(new IdOp(id), new LinkedList<>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProcExprsOp exprs = (ProcExprsOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcCallOp(new IdOp(id), exprs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ProcCall ::= ID LPAR RPAR 
            {
              ProcCallOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new ProcCallOp(new IdOp(id),null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ElifOp> elifs = (LinkedList<ElifOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseOpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elseOpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp elseOp = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(elifs == null && elseOp == null)
                  RESULT = new IfStatOp(expr,body);
                else if(elifs != null && elseOp != null){
                        RESULT = new IfStatOp(expr,body,elifs,elseOp);
                }
                else if(elifs != null && elseOp == null){
                        RESULT = new IfStatOp(expr,body,elifs);
                }
                else
                RESULT = new IfStatOp(expr,body,elseOp);

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Elifs ::= Elif Elifs 
            {
              LinkedList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ElifOp> elifs = (LinkedList<ElifOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if(elifs == null){
                                            elifs = new LinkedList<ElifOp>();}
                                        elifs.add(elif);
                                        RESULT = elifs;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elifs",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Elifs ::= 
            {
              LinkedList<ElifOp> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elifs",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Elif ::= ELIF Expr THEN Body 
            {
              ElifOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElifOp(expr,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = body; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Else ::= 
            {
              BodyOp RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              WhileStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new WhileStatOp(expr, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOArgs ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> exprList = new LinkedList<>();
               exprList.add(expr);
               RESULT = exprList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOArgs ::= Expr DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              LinkedList<Expr> RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> list = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 expr2.setDollar(true);
               list.add(expr1);
               list.add(expr2);
               RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> list = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 expr.setDollar(true);
               list.add(expr);
               RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IOArgs ::= 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              ProcExprsOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int procExprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procExprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcExprsOp procExprs = (ProcExprsOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 procExprs.getExprs().add(expr);
                                                       RESULT = procExprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              ProcExprsOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int procExprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int procExprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcExprsOp procExprs = (ProcExprsOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 procExprs.getRefId().add(new IdOp(id));
	                                            RESULT = procExprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ProcExprs ::= Expr 
            {
              ProcExprsOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> exprs = new LinkedList<>();
                      exprs.add(expr);
                      RESULT = new ProcExprsOp(exprs, new LinkedList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ProcExprs ::= REF ID 
            {
              ProcExprsOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<IdOp> refIds = new LinkedList<>();
	                  refIds.add(new IdOp(id));
	                  RESULT = new ProcExprsOp(new LinkedList<>() ,refIds); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exprs ::= Expr COMMA Exprs 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> exprs = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 exprs.add(expr);
                                          RESULT = exprs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exprs ::= Expr 
            {
              LinkedList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> exprList = new LinkedList<>();
                   exprList.add(expr);
                   RESULT = exprList;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funcallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCallOp funcall = (FunCallOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcall; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int realConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float realConst = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new  RealOp(realConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer intConst = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerOp(intConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringOp(stringConst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdOp(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new TrueOp();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new FalseOp(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DiffOp(e1,e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MulOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GTOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GEOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LTOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LEOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EQOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NEOp(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParOp(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UminusOp(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotOp(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
