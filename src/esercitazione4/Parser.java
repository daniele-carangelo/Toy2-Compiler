
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\005\004\000\002\006\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\007\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\014\000\002\014" +
    "\006\000\002\014\002\000\002\015\007\000\002\015\002" +
    "\000\002\016\005\000\002\016\003\000\002\017\012\000" +
    "\002\020\006\000\002\020\002\000\002\021\007\000\002" +
    "\021\002\000\002\022\003\000\002\022\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\002\000\002\024\006" +
    "\000\002\024\004\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\025\006\000\002\025\005\000\002\026" +
    "\006\000\002\026\005\000\002\027\011\000\002\030\004" +
    "\000\002\030\002\000\002\031\006\000\002\032\004\000" +
    "\002\032\002\000\002\033\007\000\002\034\004\000\002" +
    "\034\007\000\002\034\002\000\002\035\005\000\002\035" +
    "\006\000\002\035\003\000\002\035\004\000\002\036\005" +
    "\000\002\036\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\004\000\002\037" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\010\004\004\020\011\025\ufffd\001\002\000" +
    "\004\010\155\001\002\000\004\002\262\001\002\000\010" +
    "\004\004\020\011\025\ufffd\001\002\000\010\004\004\020" +
    "\011\025\ufffd\001\002\000\004\025\224\001\002\000\004" +
    "\010\012\001\002\000\004\023\013\001\002\000\006\010" +
    "\014\024\uffe4\001\002\000\004\005\214\001\002\000\004" +
    "\024\016\001\002\000\004\021\017\001\002\000\012\013" +
    "\023\014\020\015\021\016\024\001\002\000\012\005\uffe9" +
    "\007\uffe9\011\uffe9\024\uffe9\001\002\000\012\005\uffe8\007" +
    "\uffe8\011\uffe8\024\uffe8\001\002\000\006\005\uffe0\011\212" +
    "\001\002\000\012\005\uffea\007\uffea\011\uffea\024\uffea\001" +
    "\002\000\012\005\uffe7\007\uffe7\011\uffe7\024\uffe7\001\002" +
    "\000\004\005\026\001\002\000\024\004\004\010\037\017" +
    "\044\022\uffd6\030\040\031\041\033\027\034\036\041\031" +
    "\001\002\000\030\007\uffc0\010\057\012\051\023\052\032" +
    "\130\060\060\063\047\064\055\065\045\066\050\067\054" +
    "\001\002\000\004\006\205\001\002\000\024\010\057\012" +
    "\051\023\052\060\060\063\047\064\055\065\045\066\050" +
    "\067\054\001\002\000\004\007\200\001\002\000\004\007" +
    "\177\001\002\000\004\007\176\001\002\000\036\004\004" +
    "\010\037\017\044\022\uffd6\026\uffd6\030\040\031\041\033" +
    "\027\034\036\036\uffd6\037\uffd6\040\uffd6\041\031\043\uffd6" +
    "\001\002\000\024\010\057\012\051\023\052\060\060\063" +
    "\047\064\055\065\045\066\050\067\054\001\002\000\010" +
    "\006\ufff2\011\141\023\142\001\002\000\030\007\uffc0\010" +
    "\057\012\051\023\052\032\130\060\060\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\030\007\uffc0\010" +
    "\057\012\051\023\052\032\130\060\060\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\036\004\004\010" +
    "\037\017\044\022\uffd6\026\uffd6\030\040\031\041\033\027" +
    "\034\036\036\uffd6\037\uffd6\040\uffd6\041\031\043\uffd6\001" +
    "\002\000\004\022\124\001\002\000\024\010\057\012\051" +
    "\023\052\060\060\063\047\064\055\065\045\066\050\067" +
    "\054\001\002\000\070\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\023\uffb8\024\uffb8\032\uffb8\035\uffb8\042\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\063\uffb8\064" +
    "\uffb8\065\uffb8\066\uffb8\067\uffb8\001\002\000\040\007\uffba" +
    "\011\122\024\uffba\044\066\045\062\046\072\047\070\050" +
    "\065\051\073\052\074\053\067\054\071\055\064\056\063" +
    "\057\075\001\002\000\024\010\057\012\051\023\052\060" +
    "\060\063\047\064\055\065\045\066\050\067\054\001\002" +
    "\000\070\007\uffb4\010\uffb4\011\uffb4\012\uffb4\023\uffb4\024" +
    "\uffb4\032\uffb4\035\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\001\002\000\070\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\023\uffb6\024\uffb6\032\uffb6\035\uffb6\042\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\001\002\000" +
    "\024\010\057\012\051\023\052\060\060\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\004\007\116\001" +
    "\002\000\070\007\uffb3\010\uffb3\011\uffb3\012\uffb3\023\uffb3" +
    "\024\uffb3\032\uffb3\035\uffb3\042\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\001\002\000\070\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\023\uffb7\024\uffb7\032\uffb7\035\uffb7\042" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\001\002" +
    "\000\070\007\uffb9\010\uffb9\011\uffb9\012\uffb9\023\uffb9\024" +
    "\uffb9\032\uffb9\035\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\067\uffb9\001\002\000\070\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\023\112\024\uffb5\032\uffb5\035\uffb5\042\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000" +
    "\024\010\057\012\051\023\052\060\060\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\070\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\023\uffa4\024\uffa4\032\uffa4\035\uffa4" +
    "\042\uffa4\044\066\045\062\046\072\047\070\050\065\051" +
    "\073\052\074\053\067\054\071\055\064\056\uffa4\057\uffa4" +
    "\060\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\001" +
    "\002\000\024\010\057\012\051\023\052\060\060\063\047" +
    "\064\055\065\045\066\050\067\054\001\002\000\024\010" +
    "\057\012\051\023\052\060\060\063\047\064\055\065\045" +
    "\066\050\067\054\001\002\000\024\010\057\012\051\023" +
    "\052\060\060\063\047\064\055\065\045\066\050\067\054" +
    "\001\002\000\024\010\057\012\051\023\052\060\060\063" +
    "\047\064\055\065\045\066\050\067\054\001\002\000\024" +
    "\010\057\012\051\023\052\060\060\063\047\064\055\065" +
    "\045\066\050\067\054\001\002\000\024\010\057\012\051" +
    "\023\052\060\060\063\047\064\055\065\045\066\050\067" +
    "\054\001\002\000\024\010\057\012\051\023\052\060\060" +
    "\063\047\064\055\065\045\066\050\067\054\001\002\000" +
    "\024\010\057\012\051\023\052\060\060\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\024\010\057\012" +
    "\051\023\052\060\060\063\047\064\055\065\045\066\050" +
    "\067\054\001\002\000\024\010\057\012\051\023\052\060" +
    "\060\063\047\064\055\065\045\066\050\067\054\001\002" +
    "\000\024\010\057\012\051\023\052\060\060\063\047\064" +
    "\055\065\045\066\050\067\054\001\002\000\024\010\057" +
    "\012\051\023\052\060\060\063\047\064\055\065\045\066" +
    "\050\067\054\001\002\000\070\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\023\uffad\024\uffad\032\uffad\035\uffad\042\uffad\044" +
    "\066\045\062\046\072\047\070\050\065\051\073\052\074" +
    "\053\067\054\071\055\064\056\063\057\uffad\060\uffad\063" +
    "\uffad\064\uffad\065\uffad\066\uffad\067\uffad\001\002\000\054" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\023\uffaa\024\uffaa\032" +
    "\uffaa\035\uffaa\042\uffaa\044\066\045\062\046\072\047\070" +
    "\056\uffaa\057\uffaa\060\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\001\002\000\054\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\023\uffa7\024\uffa7\032\uffa7\035\uffa7\042\uffa7\044" +
    "\066\045\062\046\072\047\070\056\uffa7\057\uffa7\060\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\001\002\000" +
    "\070\007\uffb0\010\uffb0\011\uffb0\012\uffb0\023\uffb0\024\uffb0" +
    "\032\uffb0\035\uffb0\042\uffb0\044\uffb0\045\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\057\uffb0\060\uffb0\063\uffb0\064\uffb0\065\uffb0\066" +
    "\uffb0\067\uffb0\001\002\000\054\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\023\uffac\024\uffac\032\uffac\035\uffac\042\uffac\044" +
    "\066\045\062\046\072\047\070\056\uffac\057\uffac\060\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\001\002\000" +
    "\070\007\uffaf\010\uffaf\011\uffaf\012\uffaf\023\uffaf\024\uffaf" +
    "\032\uffaf\035\uffaf\042\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\063\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\001\002\000\054\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\023\uffa9\024\uffa9\032\uffa9\035\uffa9\042\uffa9\044" +
    "\066\045\062\046\072\047\070\056\uffa9\057\uffa9\060\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\001\002\000" +
    "\070\007\uffb2\010\uffb2\011\uffb2\012\uffb2\023\uffb2\024\uffb2" +
    "\032\uffb2\035\uffb2\042\uffb2\044\uffb2\045\uffb2\046\072\047" +
    "\070\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\001\002\000\054\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\023\uffa8\024\uffa8\032\uffa8\035\uffa8\042\uffa8\044" +
    "\066\045\062\046\072\047\070\056\uffa8\057\uffa8\060\uffa8" +
    "\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\001\002\000" +
    "\054\007\uffab\010\uffab\011\uffab\012\uffab\023\uffab\024\uffab" +
    "\032\uffab\035\uffab\042\uffab\044\066\045\062\046\072\047" +
    "\070\056\uffab\057\uffab\060\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\067\uffab\001\002\000\070\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\023\uffae\024\uffae\032\uffae\035\uffae\042\uffae" +
    "\044\066\045\062\046\072\047\070\050\065\051\073\052" +
    "\074\053\067\054\071\055\064\056\uffae\057\uffae\060\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\001\002\000" +
    "\070\007\uffb1\010\uffb1\011\uffb1\012\uffb1\023\uffb1\024\uffb1" +
    "\032\uffb1\035\uffb1\042\uffb1\044\uffb1\045\uffb1\046\072\047" +
    "\070\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\063\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\001\002\000\026\010\057\012\051\023\052" +
    "\024\114\060\060\063\047\064\055\065\045\066\050\067" +
    "\054\001\002\000\004\024\115\001\002\000\070\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\023\uffcc\024\uffcc\032\uffcc\035" +
    "\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\001\002\000\070\007\uffcd\010\uffcd\011\uffcd\012\uffcd\023" +
    "\uffcd\024\uffcd\032\uffcd\035\uffcd\042\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\001\002\000\036\004\uffd3\010" +
    "\uffd3\017\uffd3\022\uffd3\026\uffd3\030\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\001" +
    "\002\000\034\024\120\044\066\045\062\046\072\047\070" +
    "\050\065\051\073\052\074\053\067\054\071\055\064\056" +
    "\063\057\075\001\002\000\070\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\023\uffa6\024\uffa6\032\uffa6\035\uffa6\042\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\001\002\000\070" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\023\uffa5\024\uffa5\032" +
    "\uffa5\035\uffa5\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\067\uffa5\001\002\000\024\010\057\012\051\023\052\060" +
    "\060\063\047\064\055\065\045\066\050\067\054\001\002" +
    "\000\006\007\uffbb\024\uffbb\001\002\000\012\002\uffe6\004" +
    "\uffe6\020\uffe6\025\uffe6\001\002\000\016\022\uffd7\026\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\043\uffd7\001\002\000\060\007" +
    "\uffc0\010\057\012\051\023\052\032\130\044\066\045\062" +
    "\046\072\047\070\050\065\051\073\052\074\053\067\054" +
    "\071\055\064\056\063\057\075\060\060\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\004\007\135\001" +
    "\002\000\004\023\131\001\002\000\024\010\057\012\051" +
    "\023\052\060\060\063\047\064\055\065\045\066\050\067" +
    "\054\001\002\000\034\024\133\044\066\045\062\046\072" +
    "\047\070\050\065\051\073\052\074\053\067\054\071\055" +
    "\064\056\063\057\075\001\002\000\030\007\uffc0\010\057" +
    "\012\051\023\052\032\130\060\060\063\047\064\055\065" +
    "\045\066\050\067\054\001\002\000\004\007\uffc1\001\002" +
    "\000\036\004\uffd1\010\uffd1\017\uffd1\022\uffd1\026\uffd1\030" +
    "\uffd1\031\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\043\uffd1\001\002\000\004\007\uffc2\001\002\000" +
    "\004\007\140\001\002\000\036\004\uffd2\010\uffd2\017\uffd2" +
    "\022\uffd2\026\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\043\uffd2\001\002\000\004" +
    "\010\155\001\002\000\030\010\057\012\051\023\052\024" +
    "\146\060\060\062\145\063\047\064\055\065\045\066\050" +
    "\067\054\001\002\000\004\024\154\001\002\000\036\011" +
    "\152\024\uffbd\044\066\045\062\046\072\047\070\050\065" +
    "\051\073\052\074\053\067\054\071\055\064\056\063\057" +
    "\075\001\002\000\004\010\147\001\002\000\004\007\uffca" +
    "\001\002\000\006\011\150\024\uffbc\001\002\000\026\010" +
    "\057\012\051\023\052\060\060\062\145\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\004\024\uffbe\001" +
    "\002\000\026\010\057\012\051\023\052\060\060\062\145" +
    "\063\047\064\055\065\045\066\050\067\054\001\002\000" +
    "\004\024\uffbf\001\002\000\004\007\uffcb\001\002\000\010" +
    "\005\ufff2\006\ufff2\011\141\001\002\000\006\005\ufff3\006" +
    "\ufff3\001\002\000\034\035\160\044\066\045\062\046\072" +
    "\047\070\050\065\051\073\052\074\053\067\054\071\055" +
    "\064\056\063\057\075\001\002\000\030\004\004\010\037" +
    "\017\044\030\040\031\041\033\027\034\036\036\uffd6\037" +
    "\uffd6\040\uffd6\041\031\001\002\000\010\036\uffc7\037\uffc7" +
    "\040\163\001\002\000\006\036\171\037\uffc4\001\002\000" +
    "\024\010\057\012\051\023\052\060\060\063\047\064\055" +
    "\065\045\066\050\067\054\001\002\000\010\036\uffc7\037" +
    "\uffc7\040\163\001\002\000\006\036\uffc8\037\uffc8\001\002" +
    "\000\034\035\167\044\066\045\062\046\072\047\070\050" +
    "\065\051\073\052\074\053\067\054\071\055\064\056\063" +
    "\057\075\001\002\000\030\004\004\010\037\017\044\030" +
    "\040\031\041\033\027\034\036\036\uffd6\037\uffd6\040\uffd6" +
    "\041\031\001\002\000\010\036\uffc6\037\uffc6\040\uffc6\001" +
    "\002\000\024\004\004\010\037\017\044\030\040\031\041" +
    "\033\027\034\036\037\uffd6\041\031\001\002\000\004\037" +
    "\173\001\002\000\004\007\uffc9\001\002\000\004\037\uffc5" +
    "\001\002\000\016\022\uffd8\026\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\043\uffd8\001\002\000\036\004\uffcf\010\uffcf\017\uffcf" +
    "\022\uffcf\026\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\001\002\000\036" +
    "\004\uffd4\010\uffd4\017\uffd4\022\uffd4\026\uffd4\030\uffd4\031" +
    "\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\043\uffd4\001\002\000\036\004\uffce\010\uffce\017\uffce\022" +
    "\uffce\026\uffce\030\uffce\031\uffce\033\uffce\034\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\043\uffce\001\002\000\034\042" +
    "\202\044\066\045\062\046\072\047\070\050\065\051\073" +
    "\052\074\053\067\054\071\055\064\056\063\057\075\001" +
    "\002\000\024\004\004\010\037\017\044\030\040\031\041" +
    "\033\027\034\036\041\031\043\uffd6\001\002\000\004\043" +
    "\204\001\002\000\004\007\uffc3\001\002\000\024\010\057" +
    "\012\051\023\052\060\060\063\047\064\055\065\045\066" +
    "\050\067\054\001\002\000\004\007\207\001\002\000\036" +
    "\004\uffd5\010\uffd5\017\uffd5\022\uffd5\026\uffd5\030\uffd5\031" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\043\uffd5\001\002\000\004\007\211\001\002\000\036\004" +
    "\uffd0\010\uffd0\017\uffd0\022\uffd0\026\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043" +
    "\uffd0\001\002\000\012\013\023\014\020\015\021\016\024" +
    "\001\002\000\004\005\uffe1\001\002\000\012\013\023\014" +
    "\020\015\021\016\024\001\002\000\006\011\216\024\uffe2" +
    "\001\002\000\004\010\220\001\002\000\004\024\uffe5\001" +
    "\002\000\004\005\221\001\002\000\012\013\023\014\020" +
    "\015\021\016\024\001\002\000\006\011\216\024\uffe2\001" +
    "\002\000\004\024\uffe3\001\002\000\004\010\235\001\002" +
    "\000\012\002\ufff9\004\004\020\011\025\224\001\002\000" +
    "\012\002\ufff9\004\004\020\011\025\224\001\002\000\012" +
    "\002\ufff9\004\004\020\011\025\224\001\002\000\004\002" +
    "\001\001\002\000\012\002\ufff9\004\004\020\011\025\224" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufffb\001\002\000\004\023\236\001\002" +
    "\000\010\010\237\024\uffdd\027\240\001\002\000\004\005" +
    "\uffda\001\002\000\004\010\257\001\002\000\004\024\253" +
    "\001\002\000\004\005\243\001\002\000\012\013\023\014" +
    "\020\015\021\016\024\001\002\000\006\011\245\024\uffdb" +
    "\001\002\000\006\010\237\027\240\001\002\000\004\024" +
    "\uffde\001\002\000\004\005\250\001\002\000\012\013\023" +
    "\014\020\015\021\016\024\001\002\000\006\011\245\024" +
    "\uffdb\001\002\000\004\024\uffdc\001\002\000\004\005\254" +
    "\001\002\000\024\004\004\010\037\017\044\026\uffd6\030" +
    "\040\031\041\033\027\034\036\041\031\001\002\000\004" +
    "\026\256\001\002\000\012\002\uffdf\004\uffdf\020\uffdf\025" +
    "\uffdf\001\002\000\004\005\uffd9\001\002\000\004\025\uffff" +
    "\001\002\000\004\025\ufffe\001\002\000\004\002\000\001" +
    "\002\000\006\005\265\006\266\001\002\000\044\002\ufff8" +
    "\004\ufff8\010\ufff8\017\ufff8\020\ufff8\022\ufff8\025\ufff8\026" +
    "\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\043\ufff8\001\002\000\012\013\023\014" +
    "\020\015\021\016\024\001\002\000\014\012\267\064\270" +
    "\065\273\066\272\067\274\001\002\000\006\007\uffed\011" +
    "\uffed\001\002\000\006\007\uffee\011\uffee\001\002\000\004" +
    "\007\300\001\002\000\006\007\uffec\011\uffec\001\002\000" +
    "\006\007\uffef\011\uffef\001\002\000\006\007\uffeb\011\uffeb" +
    "\001\002\000\006\007\ufff0\011\276\001\002\000\014\012" +
    "\267\064\270\065\273\066\272\067\274\001\002\000\004" +
    "\007\ufff1\001\002\000\006\010\155\061\302\001\002\000" +
    "\044\002\ufff6\004\ufff6\010\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\025\ufff6\026\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\001\002\000\044" +
    "\002\ufff4\004\ufff4\010\ufff4\017\ufff4\020\ufff4\022\ufff4\025" +
    "\ufff4\026\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\043\ufff4\001\002\000\004\007" +
    "\304\001\002\000\006\010\155\061\306\001\002\000\044" +
    "\002\ufff7\004\ufff7\010\ufff7\017\ufff7\020\ufff7\022\ufff7\025" +
    "\ufff7\026\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\043\ufff7\001\002\000\044\002" +
    "\ufff5\004\ufff5\010\ufff5\017\ufff5\020\ufff5\022\ufff5\025\ufff5" +
    "\026\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\043\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\012\002\004\003\007\005\006\013\005\001" +
    "\001\000\006\006\263\007\262\001\001\000\002\001\001" +
    "\000\010\003\260\005\006\013\005\001\001\000\010\003" +
    "\257\005\006\013\005\001\001\000\004\017\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\021\016\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\023" +
    "\042\024\041\026\032\027\033\033\031\001\001\000\010" +
    "\025\055\034\207\037\125\001\001\000\002\001\001\000" +
    "\006\025\055\037\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\023" +
    "\174\024\041\026\032\027\033\033\031\001\001\000\006" +
    "\025\055\037\156\001\001\000\002\001\001\000\010\025" +
    "\055\034\136\037\125\001\001\000\010\025\055\034\126" +
    "\037\125\001\001\000\020\005\034\007\027\023\124\024" +
    "\041\026\032\027\033\033\031\001\001\000\002\001\001" +
    "\000\010\025\055\036\052\037\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\055\037\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\055\037" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\055\037\060\001\001\000\002\001\001\000\006\025\055" +
    "\037\110\001\001\000\006\025\055\037\107\001\001\000" +
    "\006\025\055\037\106\001\001\000\006\025\055\037\105" +
    "\001\001\000\006\025\055\037\104\001\001\000\006\025" +
    "\055\037\103\001\001\000\006\025\055\037\102\001\001" +
    "\000\006\025\055\037\101\001\001\000\006\025\055\037" +
    "\100\001\001\000\006\025\055\037\077\001\001\000\006" +
    "\025\055\037\076\001\001\000\006\025\055\037\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\055\036\112\037\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\055" +
    "\036\122\037\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\055\034\135\037\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\055\037\131\001\001\000\002\001\001\000\010\025\055" +
    "\034\133\037\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\155\001\001\000\010\025\055\035\142\037" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\055\035\150\037\143\001\001\000\002\001\001\000\010" +
    "\025\055\035\152\037\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\034\007\027\023\160\024\041\026" +
    "\032\027\033\033\031\001\001\000\006\030\161\031\163" +
    "\001\001\000\004\032\171\001\001\000\006\025\055\037" +
    "\165\001\001\000\006\030\164\031\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\034\007\027\023" +
    "\167\024\041\026\032\027\033\033\031\001\001\000\002" +
    "\001\001\000\020\005\034\007\027\023\173\024\041\026" +
    "\032\027\033\033\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\034\007\027\023\202\024\041\026\032\027" +
    "\033\033\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\055\036\205\037\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\021\016\212\001\001\000\002\001\001\000" +
    "\004\012\214\001\001\000\004\015\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\221\001\001\000\004\015\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\227\005\226\013\225\017" +
    "\230\001\001\000\012\004\233\005\226\013\225\017\230" +
    "\001\001\000\012\004\232\005\226\013\225\017\230\001" +
    "\001\000\002\001\001\000\012\004\231\005\226\013\225" +
    "\017\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\240\022\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\243\001\001\000\004" +
    "\021\245\001\001\000\004\022\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\250\001\001\000\004" +
    "\021\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\034\007\027\023\254\024\041\026\032\027\033" +
    "\033\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\302\001\001\000\006\010\270\011\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\276\011\274\001\001\000\002\001\001\000" +
    "\006\006\300\007\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\304\007\262\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol s){
        System.out.println("compiler has detected a syntax error at line " + s.left
            + " column " + s.right);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Iter1 Procedure Iter2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Iter1 ::= VarDecl Iter1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Iter1 ::= Function Iter1 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Iter1 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter1",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Iter2 ::= VarDecl Iter2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Iter2 ::= Function Iter2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Iter2 ::= Procedure Iter2 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Iter2 ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Iter2",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR Decls 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decls ::= Ids COLON Type SEMI Decls 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decls ::= Ids ASSIGN Consts SEMI Decls 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decls ::= Ids COLON Type SEMI ENDVAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decls ::= Ids ASSIGN Consts SEMI ENDVAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Ids ::= ID COMMA Ids 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Ids ::= ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ids",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Consts ::= Const COMMA Consts 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Consts ::= Const 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= REAL_CONST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= STRING_CONST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= REAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= STRING 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Type ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Function ::= FUNCTION ID LPAR FuncParams RPAR TYPERETURN Types COLON Body ENDFUNCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Function",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncParams ::= ID COLON Type OtherFuncParams 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncParams ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncParams",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OtherFuncParams ::= COMMA ID COLON Type OtherFuncParams 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OtherFuncParams ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherFuncParams",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Types ::= Type COMMA Types 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Types ::= Type 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Procedure ::= PROCEDURE ID LPAR ProcParams RPAR COLON Body ENDPROCEDURE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedure",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ProcParams ::= ProcParamId COLON Type OtherProcParams 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParams",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ProcParams ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParams",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherProcParams ::= COMMA ProcParamId COLON Type OtherProcParams 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OtherProcParams ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OtherProcParams",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ProcParamId ::= ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ProcParamId ::= OUT ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcParamId",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Body ::= VarDecl Body 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Body ::= Stat Body 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Body ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= Ids ASSIGN Exprs SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= ProcCall SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Exprs SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WRITE IOArgs SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WRITERETURN IOArgs SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= READ IOArgs SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= IfStat SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= WhileStat SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ProcCall ::= ID LPAR ProcExprs RPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ProcCall ::= ID LPAR RPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcCall",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Elifs Else ENDIF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Elifs ::= Elif Elifs 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elifs",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Elifs ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elifs",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Elif ::= ELIF Expr THEN Body 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Elif",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Else ::= ELSE Body 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Else ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WhileStat ::= WHILE Expr DO Body ENDWHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IOArgs ::= Expr IOArgs 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IOArgs ::= DOLLARSIGN LPAR Expr RPAR IOArgs 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IOArgs ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IOArgs",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ProcExprs ::= Expr COMMA ProcExprs 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ProcExprs ::= REF ID COMMA ProcExprs 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ProcExprs ::= Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ProcExprs ::= REF ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ProcExprs",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exprs ::= Expr COMMA Exprs 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exprs ::= Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FunCall 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= REAL_CONST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= INTEGER_CONST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= STRING_CONST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= ID 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= TRUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= FALSE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr PLUS Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr MINUS Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr TIMES Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr DIV Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr AND Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr OR Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr GT Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GE Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr LT Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr LE Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr EQ Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr NE Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= LPAR Expr RPAR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= UMINUS Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= NOT Expr 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
